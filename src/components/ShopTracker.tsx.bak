'use client';

import { useState, useEffect, useCallback, useMemo } from 'react';
import { useDebounce } from 'use-debounce';
import { FixedSizeList as List } from 'react-window';
import AutoSizer from 'react-virtualized-auto-sizer';
import Image from 'next/image';
import { getUserPricingAnalysis, getItemPricePrediction, formatPrice, formatPercentage, UserPricing } from '@/lib/shop-tracker';

interface GlobalAnalysisItem {
  id: string;
  name: string;
  image: string;
  basePrice: number;
  pricingType: string;
  globalCheapest: {
    price: number;
    savingsFromBase: number;
    maxSavingsPercent: number;
    priceRange: {
      min: number;
      max: number;
      median: number;
    };
  };
}

interface PredictionData {
  item: any;
  pricingType: string;
  message?: string;
  currentAnalysis?: any;
  predictions?: Array<{
    hour: number;
    timestamp: number;
    price: number;
    percentageFromBase: number;
    timeFromNow: string;
  }>;
  bestTime?: any;
  summary?: {
    currentPrice: number;
    bestPriceInPeriod: number;
    potentialSavings: number;
    recommendedAction: string;
    timeToWait: string;
  };
}

export default function ShopTracker() {
  const [userId, setUserId] = useState('demo-user-12345');
  const [userPricing, setUserPricing] = useState<UserPricing | null>(null);
  const [globalAnalysis, setGlobalAnalysis] = useState<GlobalAnalysisItem[] | null>(null);
  const [selectedItemId, setSelectedItemId] = useState('');
  const [prediction, setPrediction] = useState<PredictionData | null>(null);
  const [loading, setLoading] = useState(false);

  const updateAnalysis = useCallback(() => {
    setLoading(true);
    try {
      const userAnalysis = getUserPricingAnalysis(userId);
      const globalData = getGlobalMarketAnalysis();
      
      setUserPricing(userAnalysis);
      setGlobalAnalysis(globalData as GlobalAnalysisItem[]);
      
      if (selectedItemId) {
        const pred = getItemPricePrediction(userId, selectedItemId, 24);
        setPrediction(pred as PredictionData);
      }
    } catch (error) {
      console.error('Error updating analysis:', error);
    }
    setLoading(false);
  }, [userId, selectedItemId]);

  useEffect(() => {
    updateAnalysis();
  }, [updateAnalysis]);

  const handleItemSelect = (itemId: string) => {
    setSelectedItemId(itemId);
    if (itemId) {
      const pred = getItemPricePrediction(userId, itemId, 24);
      setPrediction(pred);
    } else {
      setPrediction(null);
    }
  };

  const bestDeals = userPricing ? getBestDealsForUser(userId, 5) : [];
  const overpriced = userPricing ? getOverpricedItemsForUser(userId) : [];

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-8">
      <div className="text-center">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          üè¥‚Äç‚ò†Ô∏è Shipwrecked Shop Tracker
        </h1>
        <p className="text-lg text-gray-600 mb-6">
          Find the best deals and avoid getting ripped off! 
        </p>
        
        <div className="flex justify-center items-center gap-4 mb-8">
          <label htmlFor="userId" className="font-medium">User ID:</label>
          <input
            id="userId"
            type="text"
            value={userId}
            onChange={(e) => setUserId(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter your user ID"
          />
          <button
            onClick={updateAnalysis}
            disabled={loading}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? 'Analyzing...' : 'Update Analysis'}
          </button>
        </div>
      </div>

      {/* Best Deals Section */}
      {bestDeals.length > 0 && (
        <div className="bg-green-50 border border-green-200 rounded-xl p-6">
          <h2 className="text-2xl font-bold text-green-800 mb-4">üéâ Best Deals Right Now</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {bestDeals.map((deal) => (
              <div key={deal.id} className="bg-white border border-green-300 rounded-lg p-4">
                <img src={deal.image} alt={deal.name} className="w-full h-32 object-cover rounded-lg mb-3" />
                <h3 className="font-bold text-gray-900 mb-2">{deal.name}</h3>
                <div className="space-y-1">
                  <div className="flex justify-between">
                    <span>Your Price:</span>
                    <span className="font-bold text-green-600">{formatPrice(deal.currentUserPrice)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Base Price:</span>
                    <span className="text-gray-500 line-through">{formatPrice(deal.basePrice)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Savings:</span>
                    <span className="font-bold text-green-600">{formatPercentage(-deal.savingsPercent)}</span>
                  </div>
                  {deal.analysis && (
                    <div className="mt-2 p-2 rounded-lg" style={{ backgroundColor: deal.analysis.recommendation.color + '20' }}>
                      <div className="font-bold" style={{ color: deal.analysis.recommendation.color }}>
                        {deal.analysis.recommendation.action}
                      </div>
                      <div className="text-sm text-gray-600">{deal.analysis.recommendation.reason}</div>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Overpriced Items Warning */}
      {overpriced.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-xl p-6">
          <h2 className="text-2xl font-bold text-red-800 mb-4">‚ö†Ô∏è Overpriced Items - Wait!</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {overpriced.slice(0, 6).map((item) => (
              <div key={item.id} className="bg-white border border-red-300 rounded-lg p-4">
                <img src={item.image} alt={item.name} className="w-full h-32 object-cover rounded-lg mb-3" />
                <h3 className="font-bold text-gray-900 mb-2">{item.name}</h3>
                <div className="space-y-1">
                  <div className="flex justify-between">
                    <span>Your Price:</span>
                    <span className="font-bold text-red-600">{formatPrice(item.currentUserPrice)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Base Price:</span>
                    <span>{formatPrice(item.basePrice)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Overprice:</span>
                    <span className="font-bold text-red-600">{formatPercentage(item.overpricePercent)}</span>
                  </div>
                  <div className="text-sm text-gray-600 mt-2">
                    Best time: {item.bestTimeInNext24h.timeFromNow} 
                    ({formatPrice(item.bestTimeInNext24h.bestPrice)})
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Item Detail Prediction */}
      <div className="bg-white border border-gray-200 rounded-xl p-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-4">üìä Item Price Prediction</h2>
        <div className="mb-4">
          <select
            value={selectedItemId}
            onChange={(e) => handleItemSelect(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select an item to analyze...</option>
            {userPricing?.items.map((item) => (
              <option key={item.id} value={item.id}>
                {item.name} - {formatPrice(item.currentUserPrice)}
              </option>
            ))}
          </select>
        </div>

        {prediction && prediction.pricingType === 'randomized' && (
          <div className="space-y-6">
            <div className="bg-gray-50 rounded-lg p-4">
              <h3 className="font-bold text-lg mb-3">{prediction.item.name}</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div>
                  <div className="text-sm text-gray-600">Current Price</div>
                  <div className="font-bold text-xl">{formatPrice(prediction.summary.currentPrice)}</div>
                </div>
                <div>
                  <div className="text-sm text-gray-600">Best in 24h</div>
                  <div className="font-bold text-xl text-green-600">{formatPrice(prediction.summary.bestPriceInPeriod)}</div>
                </div>
                <div>
                  <div className="text-sm text-gray-600">Potential Savings</div>
                  <div className="font-bold text-xl text-green-600">{formatPrice(prediction.summary.potentialSavings)}</div>
                </div>
                <div>
                  <div className="text-sm text-gray-600">Recommendation</div>
                  <div className="font-bold text-lg" style={{ color: prediction.currentAnalysis.recommendation.color }}>
                    {prediction.summary?.recommendedAction}
                  </div>
                </div>
              </div>
              {prediction.summary.potentialSavings > 0 && (
                <div className="mt-4 p-3 bg-blue-100 rounded-lg">
                  <div className="font-bold text-blue-800">üí° Tip: Wait {prediction.summary.timeToWait} to save {formatPrice(prediction.summary.potentialSavings)}!</div>
                </div>
              )}
            </div>

            <div>
              <h4 className="font-bold text-lg mb-3">Price Predictions (Next 12 Hours)</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                {prediction.predictions.slice(0, 12).map((pred: any, index: number) => (
                  <div 
                    key={index} 
                    className={`p-3 rounded-lg border ${
                      pred.price === prediction.summary.bestPriceInPeriod 
                        ? 'bg-green-100 border-green-300' 
                        : 'bg-gray-50 border-gray-200'
                    }`}
                  >
                    <div className="font-bold">{pred.timeFromNow}</div>
                    <div className="text-lg">{formatPrice(pred.price)}</div>
                    <div className="text-sm text-gray-600">{formatPercentage(pred.percentageFromBase - 100)}</div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {prediction && prediction.pricingType !== 'randomized' && (
          <div className="text-center py-8 text-gray-600">
            <div className="text-lg">{prediction.message}</div>
            <div className="mt-2">Price: {formatPrice(prediction.item.price)}</div>
          </div>
        )}
      </div>

      {/* All Items Table */}
      {userPricing && (
        <div className="bg-white border border-gray-200 rounded-xl p-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">üìã All Items Analysis</h2>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="border-b">
                  <th className="text-left p-3">Item</th>
                  <th className="text-left p-3">Your Price</th>
                  <th className="text-left p-3">Base Price</th>
                  <th className="text-left p-3">Difference</th>
                  <th className="text-left p-3">Rating</th>
                  <th className="text-left p-3">Best in 24h</th>
                </tr>
              </thead>
              <tbody>
                {userPricing.items.map((item) => (
                  <tr key={item.id} className="border-b hover:bg-gray-50">
                    <td className="p-3">
                      <div className="flex items-center gap-3">
                        <img src={item.image} alt={item.name} className="w-12 h-12 object-cover rounded" />
                        <div>
                          <div className="font-medium">{item.name}</div>
                          <div className="text-sm text-gray-600">{item.pricingType}</div>
                        </div>
                      </div>
                    </td>
                    <td className="p-3 font-bold">{formatPrice(item.currentUserPrice)}</td>
                    <td className="p-3">{formatPrice(item.basePrice)}</td>
                    <td className="p-3">
                      {item.pricingType === 'randomized' ? (
                        <span className={item.currentUserPrice < item.basePrice ? 'text-green-600' : 'text-red-600'}>
                          {formatPercentage(((item.currentUserPrice - item.basePrice) / item.basePrice) * 100)}
                        </span>
                      ) : (
                        <span className="text-gray-500">Static</span>
                      )}
                    </td>
                    <td className="p-3">
                      {item.analysis ? (
                        <div className="flex items-center gap-2">
                          <div 
                            className="w-6 h-6 rounded-full flex items-center justify-center text-white text-sm font-bold"
                            style={{ backgroundColor: item.analysis.recommendation.color }}
                          >
                            {item.analysis.recommendation.score}
                          </div>
                          <span style={{ color: item.analysis.recommendation.color }}>
                            {item.analysis.recommendation.action}
                          </span>
                        </div>
                      ) : (
                        <span className="text-gray-500">N/A</span>
                      )}
                    </td>
                    <td className="p-3">
                      {item.pricingType === 'randomized' ? (
                        <div>
                          <div className="font-medium">{formatPrice(item.bestTimeInNext24h.bestPrice)}</div>
                          <div className="text-sm text-gray-600">{item.bestTimeInNext24h.timeFromNow}</div>
                        </div>
                      ) : (
                        <span className="text-gray-500">No change</span>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Global Market Data */}
      {globalAnalysis && (
        <div className="bg-white border border-gray-200 rounded-xl p-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">üåç Global Market Analysis</h2>
          <div className="text-sm text-gray-600 mb-4">
            These are the absolute cheapest prices possible across all users and time periods.
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {globalAnalysis
              .filter((item: any) => item.pricingType === 'randomized')
              .sort((a: any, b: any) => b.globalCheapest.maxSavingsPercent - a.globalCheapest.maxSavingsPercent)
              .slice(0, 9)
              .map((item: any) => (
                <div key={item.id} className="border border-gray-200 rounded-lg p-4">
                  <img src={item.image} alt={item.name} className="w-full h-32 object-cover rounded-lg mb-3" />
                  <h3 className="font-bold text-gray-900 mb-2">{item.name}</h3>
                  <div className="space-y-1 text-sm">
                    <div className="flex justify-between">
                      <span>Base Price:</span>
                      <span>{formatPrice(item.basePrice)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Global Cheapest:</span>
                      <span className="font-bold text-green-600">{formatPrice(item.globalCheapest.price)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Max Savings:</span>
                      <span className="font-bold text-green-600">{formatPercentage(-item.globalCheapest.maxSavingsPercent)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Price Range:</span>
                      <span className="text-gray-600">
                        {formatPrice(item.globalCheapest.priceRange.min)} - {formatPrice(item.globalCheapest.priceRange.max)}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </div>
      )}
    </div>
  );
}
